(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{124:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(r),b=n,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||o;return r?a.a.createElement(m,s(s({ref:t},l),{},{components:r})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},78:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),o=(r(0),r(124)),i={title:"Server-side rendering"},s={unversionedId:"packages/style/ssr",id:"packages/style/ssr",isDocsHomePage:!1,title:"Server-side rendering",description:"Aesthetic supports server-side rendering and client-side hydration. However, it does require a bit",source:"@site/docs/packages/style/ssr.md",slug:"/packages/style/ssr",permalink:"/docs/packages/style/ssr",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/packages/style/ssr.md",version:"current",sidebar:"docs",previous:{title:"Render options",permalink:"/docs/packages/style/options"},next:{title:"Test utilities",permalink:"/docs/packages/style/testing"}},c=[{value:"Server",id:"server",children:[]},{value:"Client",id:"client",children:[]}],l={rightToc:c};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Aesthetic supports server-side rendering ",Object(o.b)("em",{parentName:"p"},"and")," client-side hydration. However, it does require a bit\nof setup on both ends."),Object(o.b)("h2",{id:"server"},"Server"),Object(o.b)("p",null,"On the server, we'll need to import and instantiate the ",Object(o.b)("inlineCode",{parentName:"p"},"ServerRenderer")," from\n",Object(o.b)("inlineCode",{parentName:"p"},"@aesthetic/style/server")," to extract critical CSS with ",Object(o.b)("inlineCode",{parentName:"p"},"extractStyles()"),". We can do this as part of\nthe React DOM server rendering process. In the example below, we'll use\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://expressjs.com/"}),"Express")," as our server."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx",metastring:"{3,10,13,16}","{3,10,13,16}":!0}),"import express from 'express';\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerRenderer } from '@aesthetic/style/server';\nimport App from './path/to/client/App';\n\nconst server = express();\n\nserver.get('/', (req, res) => {\n  // Instantiate a renderer for the server\n  const renderer = new ServerRenderer();\n\n  // Render the application and extract critical CSS with the renderer\n  const content = ReactDOMServer.renderToString(renderer.extractStyles(<App />));\n\n  // Convert the extracted styles to HTML `style` tags\n  const styles = renderer.renderToStyleMarkup();\n\n  // Render using your preferred template engine\n  res.render('layout', {\n    content,\n    styles,\n  });\n});\n\nserver.listen(8080);\n")),Object(o.b)("p",null,"Since our CSS extraction results in multiple ",Object(o.b)("inlineCode",{parentName:"p"},"<style />")," tags, they'll need to be injected into a\nlayout HTML file ",Object(o.b)("em",{parentName:"p"},"without")," being escaped. Something like the following."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<!DOCTYPE html>\n<html lang="en" dir="ltr">\n  <head>\n    <meta charset="UTF-8" />\n    <title>{{title}}</title>\n    {{styles}}\n  </head>\n  <body>\n    <div id="root">{{content}}</div>\n  </body>\n</html>\n')),Object(o.b)("p",null,"Because of this architecture, the React application ",Object(o.b)("em",{parentName:"p"},"cannot")," include and render the full HTML\ndocument. To work around this, a double render will need to be executed, where the application is\nrendered 1st with ",Object(o.b)("inlineCode",{parentName:"p"},"renderToString()"),", and the document that includes the content and styles is\nrendered 2nd with ",Object(o.b)("inlineCode",{parentName:"p"},"renderToStaticMarkup()"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"server.get('/', (req, res) => {\n  // Instantiate a renderer for the server\n  const renderer = new ServerRenderer();\n\n  // Render the application and extract critical CSS with the renderer\n  const content = ReactDOMServer.renderToString(renderer.extractStyles(<App />));\n\n  // Convert the extracted styles to HTML `style` tags\n  const styles = renderer.renderToStyleMarkup();\n\n  // Render using a layout HTML component\n  res.send(ReactDOMServer.renderToStaticMarkup(<Layout content={content} styles={styles} />));\n});\n")),Object(o.b)("h2",{id:"client"},"Client"),Object(o.b)("p",null,"On the client, we'll need to import and instantiate the ",Object(o.b)("inlineCode",{parentName:"p"},"ClientRenderer"),", which should already exist\nto render CSS styles. The renderer ",Object(o.b)("em",{parentName:"p"},"must")," then hydrate styles ",Object(o.b)("em",{parentName:"p"},"before")," the React application is\nmounted to the DOM."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx",metastring:"{2,6,9}","{2,6,9}":!0}),"import ReactDOM from 'react-dom';\nimport { ClientRenderer } from '@aesthetic/style';\nimport App from './path/to/client/App';\n\n// Instantiate a renderer for the client\nconst renderer = new ClientRenderer();\n\n// Hydrate CSS styles\nrenderer.hydrateStyles();\n\n// Render and hydrate the application\nReactDOM.hydrate(<App />, document.getElementById('root'));\n")))}p.isMDXComponent=!0}}]);