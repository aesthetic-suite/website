(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[7461],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<l;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},754:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return i},default:function(){return p}});var a=n(2122),r=n(9756),l=(n(7294),n(3905)),s={title:"Local styles"},o={unversionedId:"packages/sss/local",id:"packages/sss/local",isDocsHomePage:!1,title:"Local styles",description:"A local style sheet defines styles for multiple elements within a single component by mapping",source:"@site/docs/packages/sss/local.md",sourceDirName:"packages/sss",slug:"/packages/sss/local",permalink:"/docs/packages/sss/local",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/packages/sss/local.md",version:"current",frontMatter:{title:"Local styles"},sidebar:"docs",previous:{title:"Specification",permalink:"/docs/packages/sss/spec"},next:{title:"Global styles",permalink:"/docs/packages/sss/global"}},i=[{value:"Structure",id:"structure",children:[{value:"<code>@fallbacks</code>",id:"fallbacks",children:[]},{value:"<code>@media</code>",id:"media",children:[]},{value:"<code>@selectors</code>",id:"selectors",children:[]},{value:"<code>@supports</code>",id:"supports",children:[]},{value:"<code>@variables</code>",id:"variables",children:[]},{value:"<code>@variants</code>",id:"variants",children:[]}]},{value:"Parsing",id:"parsing",children:[]}],c={toc:i};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"A local style sheet defines styles for multiple elements within a single component by mapping\nselectors (elements and element states) to style declarations, which is known as a ruleset. Within\neach declaration, standard CSS properties can be defined, as well as element level at-rules."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"LocalStyleSheet")," interface can be used for type information."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { LocalStyleSheet } from '@aesthetic/sss';\n")),(0,l.kt)("h2",{id:"structure"},"Structure"),(0,l.kt)("p",null,"As mentioned above, local style sheets map selectors to style declarations. You can imagine a\nselector as either an element or an element state, like the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  modal: {\n    display: 'block',\n  },\n  modal_hidden: {\n    display: 'none',\n  },\n  modal_fixed: {\n    position: 'fixed',\n  },\n  modalHeader: {},\n  modalBody: {},\n  modalBody_overflow: {},\n  modalFooter: {},\n};\n")),(0,l.kt)("p",null,"In the example above, we have 4 elements denoted by camel case names, and 3 states/modifiers denoted\nby underscores. We use a BEM-like format to easily differentiate purpose, but feel free to write\nselectors however you please!"),(0,l.kt)("p",null,"Besides standard CSS properties, the following at-rules can be defined within each selector ruleset,\nand are ",(0,l.kt)("em",{parentName:"p"},"not allowed")," in the sheet root."),(0,l.kt)("h3",{id:"fallbacks"},(0,l.kt)("inlineCode",{parentName:"h3"},"@fallbacks")),(0,l.kt)("p",null,"Defines\n",(0,l.kt)("a",{parentName:"p",href:"https://modernweb.com/using-css-fallback-properties-for-better-cross-browser-compatibility/"},"CSS property fallbacks"),"\nfor legacy browsers that do not support newer properties. The at-rule requires an object, with the\nkey being a property name, and the value being a property value, or an array of values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  element: {\n    background: 'linear-gradient(...)',\n    display: 'flex',\n\n    '@fallbacks': {\n      // Single fallback\n      background: 'red',\n      // Multiple fallbacks\n      display: ['block', 'inline-block'],\n    },\n  },\n};\n")),(0,l.kt)("p",null,"Emits an ",(0,l.kt)("inlineCode",{parentName:"p"},"onFallback")," event per property with an array of values."),(0,l.kt)("h3",{id:"media"},(0,l.kt)("inlineCode",{parentName:"h3"},"@media")),(0,l.kt)("p",null,"Defines ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@media"},"media queries")," by mapping\nbreakpoints and queries to style declarations. Declarations can nest selectors and additional\nat-rules."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  element: {\n    maxWidth: 300,\n\n    '@media': {\n      '(min-width: 400px)': {\n        maxWidth: 'auto',\n      },\n      'screen and (min-width: 1800px)': {\n        maxWidth: '100%',\n      },\n    },\n  },\n};\n")),(0,l.kt)("p",null,"Emits an ",(0,l.kt)("inlineCode",{parentName:"p"},"onMedia")," event per media query declaration."),(0,l.kt)("h3",{id:"selectors"},(0,l.kt)("inlineCode",{parentName:"h3"},"@selectors")),(0,l.kt)("p",null,"Defines advanced ",(0,l.kt)("a",{parentName:"p",href:"/docs/packages/sss/spec#selectors"},"selectors")," that aren't type-safe or supported by\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/frenic/csstype"},"csstype"),"'s standard attributes and pseudos. This includes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#Combinators"},"Combinators")," denoted\nby a leading ",(0,l.kt)("inlineCode",{parentName:"li"},">")," (also known as direct descendents)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"},"Attribute selectors")," that\nmatch against a value using patterns."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/:not"},"Pseudo class functions")," like ",(0,l.kt)("inlineCode",{parentName:"li"},":not()")," and\n",(0,l.kt)("inlineCode",{parentName:"li"},":nth-child()")," (as they incur infinite combinations)."),(0,l.kt)("li",{parentName:"ul"},"Multiple selectors separated by a comma.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  element: {\n    '@selectors': {\n      // Combinators must start with >, ~, or +\n      '> li': {\n        listStyle: 'none',\n      },\n\n      // Attributes must start with [ and end with ]\n      '[href*=\"foo\"]': {\n        color: 'red',\n      },\n\n      // Pseudos must start with : or ::\n      ':not(:nth-child(9))': {\n        display: 'hidden',\n      },\n\n      // Multiple selectors can be separated with a comma\n      ':disabled, [disabled]': {\n        opacity: 0.75,\n      },\n    },\n  },\n};\n")),(0,l.kt)("p",null,"Emits an ",(0,l.kt)("inlineCode",{parentName:"p"},"onSelector"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"onPseudo"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"onAttribute")," event per selector declaration."),(0,l.kt)("h3",{id:"supports"},(0,l.kt)("inlineCode",{parentName:"h3"},"@supports")),(0,l.kt)("p",null,"Defines ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports"},"supports")," by mapping feature\nqueries to style declarations. Declarations can nest selectors and additional at-rules."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  element: {\n    float: 'left',\n\n    '@supports': {\n      '(display: flex)': {\n        float: 'none',\n        display: 'flex',\n      },\n      'not (display: grid)': {\n        display: 'block',\n      },\n    },\n  },\n};\n")),(0,l.kt)("p",null,"Emits an ",(0,l.kt)("inlineCode",{parentName:"p"},"onSupports")," event per feature query declaration."),(0,l.kt)("h3",{id:"variables"},(0,l.kt)("inlineCode",{parentName:"h3"},"@variables")),(0,l.kt)("p",null,"Defines element level CSS variables, by mapping variable names to their value. Names can be in camel\ncase or variable kebab case (prefixed with ",(0,l.kt)("inlineCode",{parentName:"p"},"--"),"). Useful for overriding root and theme CSS variables\non a per element basis."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  element: {\n    '@variables': {\n      spacingDf: '1.5rem',\n      '--spacing-df': '1.5rem',\n    },\n  },\n};\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Variable values are not transformed in any way, so they must be explicit. For example, unitless\nvalues are not supported for values that require a unit suffix.")),(0,l.kt)("p",null,"Emits an ",(0,l.kt)("inlineCode",{parentName:"p"},"onVariable")," event for each CSS variable."),(0,l.kt)("h3",{id:"variants"},(0,l.kt)("inlineCode",{parentName:"h3"},"@variants")),(0,l.kt)("p",null,"Defines multiple variations for the rule in question. Each variation is a style object that maps to\na specific variation type and value combination, separated by a colon (",(0,l.kt)("inlineCode",{parentName:"p"},"type:enum"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const localSheet: LocalStyleSheet = {\n  element: {\n    display: 'block',\n\n    '@variants': {\n      'size:small': { fontSize: 14 },\n      'size:default': { fontSize: 16 },\n      'size:large': { fontSize: 18 },\n\n      'type:negative': {},\n      'type:positive': {},\n      'type:brandPrimary': {},\n    },\n  },\n};\n")),(0,l.kt)("p",null,"The variant block ",(0,l.kt)("em",{parentName:"p"},"does not")," merge into the parent block, as the consumer should handle what to do\nwith variants. If no custom handling is provided, variants are a no-op."),(0,l.kt)("p",null,"Emits an ",(0,l.kt)("inlineCode",{parentName:"p"},"onVariant")," event for each CSS variant object."),(0,l.kt)("h2",{id:"parsing"},"Parsing"),(0,l.kt)("p",null,"To parse a style sheet, import and run ",(0,l.kt)("inlineCode",{parentName:"p"},"parse()")," with type ",(0,l.kt)("inlineCode",{parentName:"p"},"local"),". To streamline consumption, the\nparser utilizes an event emitter, where each at-rule must be listened to and handled. Once listeners\nare registered, execute the ",(0,l.kt)("inlineCode",{parentName:"p"},"parse()")," method with the style sheet."),(0,l.kt)("p",null,'Because of this architecture, you must "build" or "handle" the final result yourself. However, any\nevent that starts with ',(0,l.kt)("inlineCode",{parentName:"p"},"block:")," is automatically handled by modifying the object used in the parent\n",(0,l.kt)("inlineCode",{parentName:"p"},"block")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ruleset")," events. Typically these do not need to be defined."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { parse } from '@aesthetic/sss';\n\nconst sheet = new CSSStyleSheet();\nconst styles = {\n  container: {\n    display: 'flex',\n    maxWidth: '100%',\n  },\n\n  button: {\n    display: 'inline-block',\n    textAlign: 'center',\n    padding: '8px 12px',\n    borderRadius: '3px',\n  },\n\n  button_active: {\n    fontWeight: 'bold',\n  },\n};\n\nparse('local', styles, {\n  // For `fontFamily` property\n  onFontFace(fontFace) {\n    sheet.insertRule(`@font-face { ${cssify(fontFace)} }`, sheet.cssRules.length);\n\n    return family;\n  },\n  // For `animationName` property\n  onKeyframes(keyframes, name) {\n    sheet.insertRule(`@keyframes ${name} { ${cssify(keyframes)} }`, sheet.cssRules.length);\n\n    return name;\n  },\n  onRuleset(name, selector, declaration) {\n    sheet.insertRule(\n      `.${createClassName(selector)} { ${cssify(declaration)} }`,\n      sheet.cssRules.length,\n    );\n  },\n});\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The full list of events and their types can be found in the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aesthetic-suite/framework/blob/master/packages/sss/src/Parser.ts"},"source ",(0,l.kt)("inlineCode",{parentName:"a"},"Parser")," class"),".")))}p.isMDXComponent=!0}}]);