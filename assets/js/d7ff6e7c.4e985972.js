(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[2124],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7042:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return l},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),s={title:"Test utilities"},o={unversionedId:"packages/style/testing",id:"packages/style/testing",isDocsHomePage:!1,title:"Test utilities",description:"Aesthetic provides a few utilities for testing rendered styles in a streamlined way, all of which",source:"@site/docs/packages/style/testing.md",sourceDirName:"packages/style",slug:"/packages/style/testing",permalink:"/docs/packages/style/testing",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/packages/style/testing.md",version:"current",frontMatter:{title:"Test utilities"},sidebar:"docs",previous:{title:"Server-side rendering",permalink:"/docs/packages/style/ssr"},next:{title:"API",permalink:"/docs/packages/style/api"}},l=[],c={toc:l};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Aesthetic provides a few utilities for testing rendered styles in a streamlined way, all of which\ncan be imported from the ",(0,a.kt)("inlineCode",{parentName:"p"},"@aesthetic/style/test")," module."),(0,a.kt)("p",null,"The most important utility is the ",(0,a.kt)("inlineCode",{parentName:"p"},"purgeStyles()")," function, which should be called after each test\nso that document CSS is reset. If not called, you may see unexpected results, where the CSS from\ndifferent tests will bleed into each other."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { purgeStyles } from '@aesthetic/style/test';\n\nafterEach(() => {\n  purgeStyles();\n});\n")),(0,a.kt)("p",null,"The other useful utility is ",(0,a.kt)("inlineCode",{parentName:"p"},"getRenderedStyles()"),", which returns the rendered CSS as a string.\nUseful for snapshots and visual comparisons. This function requires a type (",(0,a.kt)("inlineCode",{parentName:"p"},"global"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"conditions"),",\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"standard"),") to determine which ",(0,a.kt)("inlineCode",{parentName:"p"},"<style />")," element to read CSS from."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { getRenderedStyles } from '@aesthetic/style/test';\n\nit('renders a component', () => {\n  render(<Example />);\n\n  expect(getRenderedStyles('standard')).toMatchSnapshot();\n});\n")))}p.isMDXComponent=!0}}]);