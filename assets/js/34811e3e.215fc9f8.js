(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[4461],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),d=s,u=h["".concat(i,".").concat(d)]||h[d]||m[d]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5936:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return i},default:function(){return p}});var a=n(2122),s=n(9756),r=(n(7294),n(3905)),o={title:"Theme style sheets",sidebar_label:"For themes"},l={unversionedId:"dev/css-in-js/style-sheets/themes",id:"dev/css-in-js/style-sheets/themes",isDocsHomePage:!1,title:"Theme style sheets",description:"While component style sheets are used to style elements in isolation, a theme",source:"@site/docs/dev/css-in-js/style-sheets/themes.md",sourceDirName:"dev/css-in-js/style-sheets",slug:"/dev/css-in-js/style-sheets/themes",permalink:"/docs/dev/css-in-js/style-sheets/themes",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/dev/css-in-js/style-sheets/themes.md",version:"current",sidebar_label:"For themes",frontMatter:{title:"Theme style sheets",sidebar_label:"For themes"},sidebar:"docs",previous:{title:"Style sheets",permalink:"/docs/dev/css-in-js/style-sheets"},next:{title:"Component style sheets",permalink:"/docs/dev/css-in-js/style-sheets/components"}},i=[{value:"Styling the document",id:"styling-the-document",children:[{value:"Root containers",id:"root-containers",children:[]},{value:"Font faces",id:"font-faces",children:[]},{value:"Keyframes",id:"keyframes",children:[]},{value:"Imports",id:"imports",children:[]},{value:"Variables",id:"variables",children:[]}]}],c={toc:i};function p(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"While ",(0,r.kt)("a",{parentName:"p",href:"/docs/dev/css-in-js/style-sheets/components"},"component style sheets")," are used to style elements in isolation, a theme\nstyle sheet is used to style the document (using a container), while also providing global at-rules\nlike font faces or keyframes."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"createThemeStyles()")," method to create a theme style sheet. This style sheet can then be\npassed on a theme-by-theme basis during registration with ",(0,r.kt)("inlineCode",{parentName:"p"},"registerTheme()")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"registerDefaultTheme()"),". Feel free to add a style sheet to one or many themes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="setup.ts"',title:'"setup.ts"'},"import { createThemeStyles, registerTheme } from '@aesthetic/<integration>';\nimport dayTheme from './system/themes/day';\nimport nightTheme from './system/themes/night';\n\nconst styleSheet = createThemeStyles(() => ({\n  '@font-face': {\n    'Open Sans': {\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n  },\n}));\n\nregisterTheme('day', dayTheme, styleSheet);\nregisterTheme('night', nightTheme, styleSheet);\n")),(0,r.kt)("h2",{id:"styling-the-document"},"Styling the document"),(0,r.kt)("h3",{id:"root-containers"},"Root containers"),(0,r.kt)("p",null,'A container is used to provide "global" styles (fonts, colors, etc) to a specific portion of a\ncomponent/element tree by acting as the root. Styles are scoped to a class name to avoid collisions,\nso they\'re not truely global, but are applied in 1 of 2 ways:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Document wide through the ",(0,r.kt)("inlineCode",{parentName:"li"},"<body>")," element. Automatically applied when activating a theme."),(0,r.kt)("li",{parentName:"ul"},"Per element through a ",(0,r.kt)("inlineCode",{parentName:"li"},"<div>")," element. Manually applied when using nested/contextual themes.")),(0,r.kt)("p",null,"Container styles can be defined with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@root")," at-rule, which accepts standard style objects (as\nif you're styling a component). It pairs well with the ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," mixin, which provides ",(0,r.kt)("em",{parentName:"p"},"fluid\ntypography"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createThemeStyles((css) => ({\n  '@root': css.mixin('root', {\n    backgroundColor: css.var('palette-neutral-bg-base'),\n    color: css.var('palette-neutral-fg-base'),\n    height: '100%',\n\n    '@selectors': {\n      a: {\n        color: css.var('palette-brand-fg-base'),\n      },\n    },\n  }),\n}));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"html"),", ",(0,r.kt)("inlineCode",{parentName:"p"},":root"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," global styles cannot be defined with ",(0,r.kt)("inlineCode",{parentName:"p"},"@root"),". Those category of\nglobals should be handled outside of this system.")),(0,r.kt)("h3",{id:"font-faces"},"Font faces"),(0,r.kt)("p",null,"Defines a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"},"font face")," that can be\nreferenced with the ",(0,r.kt)("inlineCode",{parentName:"p"},"fontFamily")," property. The at-rule requires an object, with the font family name\nas the key, and the font face(s) as the value. Each font face supports a ",(0,r.kt)("inlineCode",{parentName:"p"},"srcPaths")," array."),(0,r.kt)("p",null,"To support multiple font variations, like bold and italics, pass an array of font faces."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createThemeStyles(() => ({\n  '@font-face': {\n    'Open Sans': {\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n    Roboto: {\n      // ....\n    },\n  },\n}));\n")),(0,r.kt)("p",null,"Font faces defined within a theme style sheet can be accessed within a component style sheet by\nreferencing their name, like so."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  element: {\n    // Explicitly\n    fontFamily: '\"Open Sans\", Roboto, sans-serif',\n    // Configured in the design system (preferred)\n    fontFamily: css.var('typography-font-text'),\n  },\n}));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Do note that font family names must be globally unique to avoid collisions.")),(0,r.kt)("h3",{id:"keyframes"},"Keyframes"),(0,r.kt)("p",null,"Defines a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes"},"keyframes animation")," that\ncan be referenced with the ",(0,r.kt)("inlineCode",{parentName:"p"},"animationName")," property. The at-rule requires an object, with the\nanimation name as the key, and the keyframes as the value. Supports both range (from/to) and\npercentage based sequences."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createThemeStyles(() => ({\n  '@keyframes': {\n    // Range\n    fade: {\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    },\n\n    // Percentage\n    slide: {\n      '0%': { left: '0%' },\n      '50%': { left: '75%' },\n      '100%': { left: '100%' },\n    },\n  },\n}));\n")),(0,r.kt)("p",null,"Keyframes defined within a theme style sheet can be accessed within a component style sheet by\nreferencing their name, like so."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  element: {\n    animationName: 'fade 200ms, slide 3s',\n  },\n}));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Do note that keyframe names must be globally unique to avoid collisions.")),(0,r.kt)("h3",{id:"imports"},"Imports"),(0,r.kt)("p",null,"Defines one or many ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@import"},"CSS files to import"),",\nrelative to the document root. An import can either be a proper CSS formatted string (including\nquotes), or an object of ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," (required), ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"url"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createThemeStyles(() => ({\n  '@import': [\n    // String\n    'url(\"css/reset.css\") screen',\n\n    // Object\n    {\n      path: 'css/reset.css',\n      media: 'screen',\n      url: true,\n    },\n  ],\n}));\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," property is not defined, or is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", the import path will not be wrapped with\n",(0,r.kt)("inlineCode",{parentName:"p"},"url()"),"."),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Defines and formats custom\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"},"CSS variables")," to be\nused at the ",(0,r.kt)("inlineCode",{parentName:"p"},":root"),". These are ",(0,r.kt)("em",{parentName:"p"},"additional")," variables along side the ones provided by Aesthetic's\ndesign system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createThemeStyles(() => ({\n  '@variables': {\n    backgroundColor: 'black', // --background-color\n    fontSize: '16px', // --font-size\n  },\n});\n")))}p.isMDXComponent=!0}}]);