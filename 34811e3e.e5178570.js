(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{124:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),s=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=s.a.createContext({}),b=function(e){var t=s.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return s.a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},h=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),p=b(n),h=a,d=p["".concat(o,".").concat(h)]||p[h]||m[h]||r;return n?s.a.createElement(d,l(l({ref:t},i),{},{components:n})):s.a.createElement(d,l({ref:t},i))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<r;i++)o[i]=n[i];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),s=n(7),r=(n(0),n(124)),o={title:"Theme style sheets",sidebar_label:"For themes"},l={unversionedId:"dev/css-in-js/style-sheets/themes",id:"dev/css-in-js/style-sheets/themes",isDocsHomePage:!1,title:"Theme style sheets",description:"While component style sheets are used to style elements in isolation, a theme",source:"@site/docs/dev/css-in-js/style-sheets/themes.md",slug:"/dev/css-in-js/style-sheets/themes",permalink:"/docs/dev/css-in-js/style-sheets/themes",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/dev/css-in-js/style-sheets/themes.md",version:"current",sidebar_label:"For themes",sidebar:"docs",previous:{title:"Style sheets",permalink:"/docs/dev/css-in-js/style-sheets"},next:{title:"Component style sheets",permalink:"/docs/dev/css-in-js/style-sheets/components"}},c=[{value:"Styling the document",id:"styling-the-document",children:[{value:"Root containers",id:"root-containers",children:[]},{value:"Font faces",id:"font-faces",children:[]},{value:"Keyframes",id:"keyframes",children:[]},{value:"Imports",id:"imports",children:[]}]},{value:"References",id:"references",children:[]}],i={rightToc:c};function b(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"While ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/dev/css-in-js/style-sheets/components"}),"component style sheets")," are used to style elements in isolation, a theme\nstyle sheet is used to style the document (using a container), while also providing global at-rules\nlike font faces or keyframes."),Object(r.b)("p",null,"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"createThemeStyles()")," method to create a theme style sheet. This style sheet can then be\npassed on a theme-by-theme basis during registration with ",Object(r.b)("inlineCode",{parentName:"p"},"registerTheme()")," or\n",Object(r.b)("inlineCode",{parentName:"p"},"registerDefaultTheme()"),". Feel free to add a style sheet to one or many themes."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="setup.ts"',title:'"setup.ts"'}),"import { createThemeStyles, registerTheme } from '@aesthetic/<integration>';\nimport dayTheme from './system/themes/day';\nimport nightTheme from './system/themes/night';\n\nconst styleSheet = createThemeStyles(() => ({\n  '@font-face': {\n    'Open Sans': {\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n  },\n}));\n\nregisterTheme('day', dayTheme, styleSheet);\nregisterTheme('night', nightTheme, styleSheet);\n")),Object(r.b)("h2",{id:"styling-the-document"},"Styling the document"),Object(r.b)("h3",{id:"root-containers"},"Root containers"),Object(r.b)("p",null,'A container is used to provide "global" styles (fonts, colors, etc) to a specific portion of a\ncomponent/element tree by acting as the root. Styles are scoped to a class name to avoid collisions,\nso they\'re not truely global, but are applied in 1 of 2 ways:'),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Document wide through the ",Object(r.b)("inlineCode",{parentName:"li"},"<body>")," element. Automatically applied when activating a theme."),Object(r.b)("li",{parentName:"ul"},"Per element through a ",Object(r.b)("inlineCode",{parentName:"li"},"<div>")," element. Manually applied when using nested/contextual themes.")),Object(r.b)("p",null,"Container styles can be defined with the ",Object(r.b)("inlineCode",{parentName:"p"},"@root")," at-rule, which accepts standard style objects (as\nif you're styling a component). It pairs well with the ",Object(r.b)("inlineCode",{parentName:"p"},"root")," mixin."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const styleSheet = createThemeStyles((css) => ({\n  '@root': css.mixin('root', {\n    backgroundColor: css.var('palette-neutral-bg-base'),\n    color: css.var('palette-neutral-fg-base'),\n    height: '100%',\n\n    '@selectors': {\n      a: {\n        color: css.var('palette-brand-fg-base'),\n      },\n    },\n  }),\n}));\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"html"),", ",Object(r.b)("inlineCode",{parentName:"p"},":root"),", or ",Object(r.b)("inlineCode",{parentName:"p"},"*")," global styles cannot be defined with ",Object(r.b)("inlineCode",{parentName:"p"},"@root"),". Those category of\nglobals should be handled outside of this system.")),Object(r.b)("h3",{id:"font-faces"},"Font faces"),Object(r.b)("p",null,"Defines a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"}),"font face")," that can be\nreferenced with the ",Object(r.b)("inlineCode",{parentName:"p"},"fontFamily")," property. The at-rule requires an object, with the font family name\nas the key, and the font face(s) as the value. Each font face requires a ",Object(r.b)("inlineCode",{parentName:"p"},"srcPaths")," array."),Object(r.b)("p",null,"To support multiple font variations, like bold and italics, pass an array of font faces."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const styleSheet = createThemeStyles(() => ({\n  '@font-face': {\n    'Open Sans': {\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n    Roboto: {\n      // ....\n    },\n  },\n}));\n")),Object(r.b)("p",null,"Font faces defined within a theme style sheet can be accessed within a component style sheet by\nreferencing their name, like so."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const styleSheet = createComponentStyles((css) => ({\n  element: {\n    // Explicitly\n    fontFamily: '\"Open Sans\", Roboto, sans-serif',\n    // Configured in the design system (preferred)\n    fontFamily: css.var('typography-font-text'),\n  },\n}));\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Do note that font family names must be globally unique to avoid collisions.")),Object(r.b)("h3",{id:"keyframes"},"Keyframes"),Object(r.b)("p",null,"Defines a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes"}),"keyframes animation")," that\ncan be referenced with the ",Object(r.b)("inlineCode",{parentName:"p"},"animationName")," property. The at-rule requires an object, with the\nanimation name as the key, and the keyframes as the value. Supports both range (from/to) and\npercentage based sequences."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const styleSheet = createThemeStyles(() => ({\n  '@keyframes': {\n    // Range\n    fade: {\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    },\n\n    // Percentage\n    slide: {\n      '0%': { left: '0%' },\n      '50%': { left: '75%' },\n      '100%': { left: '100%' },\n    },\n  },\n}));\n")),Object(r.b)("p",null,"Keyframes defined within a theme style sheet can be accessed within a component style sheet by\nreferencing their name, like so."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const styleSheet = createComponentStyles((css) => ({\n  element: {\n    animationName: 'fade 200ms, slide 3s',\n  },\n}));\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Do note that keyframe names must be globally unique to avoid collisions.")),Object(r.b)("h3",{id:"imports"},"Imports"),Object(r.b)("p",null,"Defines one or many ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@import"}),"CSS files to import"),",\nrelative to the document root. An import can either be a proper CSS formatted string (including\nquotes), or an object of ",Object(r.b)("inlineCode",{parentName:"p"},"path")," (required), ",Object(r.b)("inlineCode",{parentName:"p"},"query"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"url"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const styleSheet = createThemeStyles(() => ({\n  '@import': [\n    // String\n    'url(\"css/reset.css\") screen',\n\n    // Object\n    {\n      path: 'css/reset.css',\n      media: 'screen',\n      url: true,\n    },\n  ],\n}));\n")),Object(r.b)("p",null,"If the ",Object(r.b)("inlineCode",{parentName:"p"},"url")," property is not defined, or is ",Object(r.b)("inlineCode",{parentName:"p"},"false"),", the import path will not be wrapped with\n",Object(r.b)("inlineCode",{parentName:"p"},"url()"),"."),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("p",null,"The structure of this style sheet is based on types provided by the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/packages/sss"}),"@aesthetic/sss")," package."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/packages/sss/local"}),"Local style sheets")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/packages/sss/global"}),"Global style sheets"))))}b.isMDXComponent=!0}}]);