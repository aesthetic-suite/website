(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[3777],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),h=s,u=m["".concat(i,".").concat(h)]||m[h]||d[h]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2143:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return i},default:function(){return p}});var a=n(2122),s=n(9756),r=(n(7294),n(3905)),o={title:"Component style sheets",sidebar_label:"For components"},l={unversionedId:"dev/css-in-js/style-sheets/components",id:"dev/css-in-js/style-sheets/components",isDocsHomePage:!1,title:"Component style sheets",description:"Components and their tree are styled through style sheets created with the createComponentStyles()",source:"@site/docs/dev/css-in-js/style-sheets/components.md",sourceDirName:"dev/css-in-js/style-sheets",slug:"/dev/css-in-js/style-sheets/components",permalink:"/docs/dev/css-in-js/style-sheets/components",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/dev/css-in-js/style-sheets/components.md",version:"current",sidebar_label:"For components",frontMatter:{title:"Component style sheets",sidebar_label:"For components"},sidebar:"docs",previous:{title:"Theme style sheets",permalink:"/docs/dev/css-in-js/style-sheets/themes"},next:{title:"Directionality",permalink:"/docs/dev/css-in-js/direction"}},i=[{value:"Styling elements",id:"styling-elements",children:[{value:"Selectors",id:"selectors",children:[]},{value:"Media and feature queries",id:"media-and-feature-queries",children:[]},{value:"Font faces",id:"font-faces",children:[]},{value:"Keyframes",id:"keyframes",children:[]},{value:"Fallbacks",id:"fallbacks",children:[]},{value:"Variants",id:"variants",children:[]},{value:"Compound variants",id:"compound-variants",children:[]}]},{value:"Overriding styles",id:"overriding-styles",children:[{value:"By color scheme",id:"by-color-scheme",children:[]},{value:"By contrast level",id:"by-contrast-level",children:[]},{value:"By theme",id:"by-theme",children:[]}]},{value:"Rendering CSS",id:"rendering-css",children:[]},{value:"References",id:"references",children:[]}],c={toc:i};function p(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Components and their tree are styled through style sheets created with the ",(0,r.kt)("inlineCode",{parentName:"p"},"createComponentStyles()"),"\nmethod. For the purpose of this documentation, let's say we're building a button component that\nrenders many elements and components, we would have a style sheet that looks something like the\nfollowing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createComponentStyles } from '@aesthetic/<integration>';\n\nconst styleSheet = createComponentStyles(() => ({\n  button: {\n    appearance: 'none',\n    backgroundColor: 'transparent',\n    border: 0,\n    cursor: 'pointer',\n    display: 'inline-flex',\n    fontSize: 'inherit',\n    margin: 0,\n    padding: '6px 8px',\n    textAlign: 'center',\n    textDecoration: 'none',\n    userSelect: 'auto',\n    verticalAlign: 'middle',\n  },\n  button_selected: { /* ... */ },\n  button_disabled: { /* ... */ },\n  before: { /* ... */ },\n  after: { /* ... */ },\n}));\n")),(0,r.kt)("p",null,"In the example above, the keys of the object are known as selectors, with each selector being a\ncombination of element and optional modifier (separated by an underscore). This is similar to the\npopular ",(0,r.kt)("a",{parentName:"p",href:"http://getbem.com/naming/"},"BEM syntax"),', without the "block", as our style sheet is the\nblock (since styles are isolated). Style sheets support as many selectors as needed!'),(0,r.kt)("h2",{id:"styling-elements"},"Styling elements"),(0,r.kt)("h3",{id:"selectors"},"Selectors"),(0,r.kt)("p",null,"There are 2 types of selectors, the first being ",(0,r.kt)("em",{parentName:"p"},"basic selectors"),", which includes pseudo elements,\npseudo classes, and HTML attributes that are deterministic and ",(0,r.kt)("strong",{parentName:"p"},"do not")," have permutations. They\ncan be defined as nested style objects directly on the element's style object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  button: {\n    backgroundColor: css.var('palette-brand-bg-base'),\n    // ...\n\n    ':hover': {\n      backgroundColor: css.var('palette-brand-bg-hovered'),\n    },\n\n    '[disabled]': {\n      backgroundColor: css.var('palette-brand-bg-disabled'),\n      opacity: 0.75,\n    },\n  },\n\n  // ...\n}));\n")),(0,r.kt)("p",null,"The other type is ",(0,r.kt)("em",{parentName:"p"},"advanced selectors"),", which includes\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#Combinators"},"combinators"),", as well\nas pseudos and attributes that ",(0,r.kt)("strong",{parentName:"p"},"do")," have permutations. Furthermore, multiple selectors can be\ndefined at once using a comma separated list."),(0,r.kt)("p",null,"Advanced selectors must be nested within a ",(0,r.kt)("inlineCode",{parentName:"p"},"@selectors")," object as they can not be properly typed\nwith TypeScript."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    // ...\n\n    '@selectors': {\n      // Combinators must start with >, ~, or +\n      '> li': {\n        listStyle: 'none',\n      },\n\n      // Attributes must start with [ and end with ]\n      '[href*=\"foo\"]': {\n        color: 'red',\n      },\n\n      // Pseudos must start with : or ::\n      ':not(:nth-child(9))': {\n        display: 'hidden',\n      },\n\n      // Multiple selectors can be separated with a comma\n      ':disabled, [disabled]': {\n        opacity: 0.75,\n      },\n    },\n  },\n}));\n")),(0,r.kt)("h3",{id:"media-and-feature-queries"},"Media and feature queries"),(0,r.kt)("p",null,"Media and feature queries can be defined within a style object using ",(0,r.kt)("inlineCode",{parentName:"p"},"@media")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@supports"),"\nrespectively. Both types require an object that maps query expressions to nested style objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  button: {\n    display: 'inline-block',\n    // ...\n\n    '@media': {\n      '(max-width: 600px)': {\n        width: '100%',\n      },\n    },\n\n    '@supports': {\n      '(display: inline-flex)': {\n        display: 'inline-flex',\n      },\n    },\n  },\n\n  // ...\n}));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"@media")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@supports")," may be nested within itself and each other.")),(0,r.kt)("p",null,"You can utilize the design system token's for consistent media query breakpoints."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  element: {\n    '@media': {\n      [css.tokens.breakpoint.lg.query]: {\n        width: '100%',\n      },\n    },\n  },\n}));\n")),(0,r.kt)("h3",{id:"font-faces"},"Font faces"),(0,r.kt)("p",null,"Fonts are special as they need to be defined on the document instead of an element, which should be\ndone with a ",(0,r.kt)("a",{parentName:"p",href:"/docs/dev/css-in-js/style-sheets/themes"},"theme style sheet"),". However, we provide some convenience through the\n",(0,r.kt)("inlineCode",{parentName:"p"},"fontFamily")," property, which can accept one or many ",(0,r.kt)("em",{parentName:"p"},"font face objects"),"."),(0,r.kt)("p",null,"Unlike normal CSS font faces, a ",(0,r.kt)("em",{parentName:"p"},"font face object")," requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"srcPath")," property, with a list of\nfile paths, instead of a ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    // ...\n    fontFamily: {\n      fontFamily: 'Open Sans',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n  },\n}));\n")),(0,r.kt)("h3",{id:"keyframes"},"Keyframes"),(0,r.kt)("p",null,"Animations have the same semantics as fonts and should be defined on a document using a\n",(0,r.kt)("a",{parentName:"p",href:"/docs/dev/css-in-js/style-sheets/themes"},"theme style sheet"),", but also like fonts, we provide some convenience through the\n",(0,r.kt)("inlineCode",{parentName:"p"},"animationName")," property, which accepts a single ",(0,r.kt)("em",{parentName:"p"},"keyframes object"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    // ...\n    animationName: {\n      from: { transform: 'scaleX(0)' },\n      to: { transform: 'scaleX(1)' },\n    },\n    animationDuration: '3s',\n    animationTimingFunction: 'ease-in',\n  },\n}));\n")),(0,r.kt)("h3",{id:"fallbacks"},"Fallbacks"),(0,r.kt)("p",null,"A rarely used but necessary feature for progressive enhancement and supporting legacy browsers.\nFallbacks allow you to define one or many different values for a single property through the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@fallbacks")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    // ...\n    display: 'inline-flex',\n\n    '@fallbacks': {\n      display: ['inline', 'inline-block'],\n    },\n  },\n}));\n")),(0,r.kt)("h3",{id:"variants"},"Variants"),(0,r.kt)("p",null,"Variants are a staple feature of many components -- especially commonly used ones like buttons,\nalerts, and labels -- and encompasses everything from sizing (small, large) to palettes (positive,\nnegative, etc)."),(0,r.kt)("p",null,"With that being said, the guiding principle behind variants is that ",(0,r.kt)("em",{parentName:"p"},"only 1")," may ever be active at a\ntime. If you need to apply more than 1, then you should use the element-modifier syntax mentioned at\nthe beginning of the chapter."),(0,r.kt)("p",null,"To utilize variants, we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"@variants")," object on a per element basis that maps each variant\n(",(0,r.kt)("inlineCode",{parentName:"p"},"type:enum"),") using nested objects. Variant names are critically important as they must match what's\npassed to ",(0,r.kt)("inlineCode",{parentName:"p"},"cx()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  button: {\n    // ...\n\n    '@variants': {\n      'size:sm': { fontSize: css.var('text-sm-size') },\n      'size:df': { fontSize: css.var('text-df-size') },\n      'size:lg': { fontSize: css.var('text-lg-size') },\n\n      'palette:brand': { backgroundColor: css.var('palette-brand-bg-base') },\n      'palette:positive': { backgroundColor: css.var('palette-positive-bg-base') },\n      'palette:warning': { backgroundColor: css.var('palette-warning-bg-base') },\n    },\n  },\n\n  // ...\n}));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Variant names must be formatted correctly! Each name combines a type to an enumerated value with a\n",(0,r.kt)("inlineCode",{parentName:"p"},":"),". Both the type and enum support alphanumeric characters, while the enum also supports ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"-"),". The type ",(0,r.kt)("em",{parentName:"p"},"must")," start with a letter.")),(0,r.kt)("h4",{id:"applying-variants"},"Applying variants"),(0,r.kt)("p",null,"How a variant gets applied is highly dependent on the integration you are using, but it basically\nboils down to the following class name generation. Pass an object of variants and their enumerations\nas the 1st argument!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const className = cx({ size: 'sm', palette: 'brand' }, 'button');\n")),(0,r.kt)("h4",{id:"handling-defaults"},"Handling defaults"),(0,r.kt)("p",null,"When handling default styles for a variant, you ",(0,r.kt)("em",{parentName:"p"},"must")," define it as a variant instead of defining it\non the element directly. This is necessary as it avoids style collisions and specificity issues."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Correct\nconst styleSheet = createComponentStyles((css) => ({\n  button: {\n    '@variants': {\n      'size:sm': { fontSize: 14 },\n      'size:df': { fontSize: 16 },\n      'size:lg': { fontSize: 18 },\n    },\n  },\n}));\n\n// Incorrect\nconst styleSheet = createComponentStyles((css) => ({\n  button: {\n    fontSize: 16,\n\n    '@variants': {\n      'size:sm': { fontSize: 14 },\n      'size:lg': { fontSize: 18 },\n    },\n  },\n}));\n")),(0,r.kt)("h3",{id:"compound-variants"},"Compound variants"),(0,r.kt)("p",null,"When you need to set variant styles based on a combination of other variants, you can combine them\nusing a ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator. This synax should be familiar as it's based on CSS."),(0,r.kt)("p",null,"Using the example above, say we want to bold the text when the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," is large, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"palette")," is\nbrand, we would do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  button: {\n    '@variants': {\n      'size:lg': { fontSize: css.var('text-lg-size') },\n\n      'palette:brand': { backgroundColor: css.var('palette-brand-bg-base') },\n\n      'size:lg + palette:brand': { fontWeight: 'bold' },\n    },\n  },\n}));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can combine as many variants as you'd like! Just be sure the variant names are properly\ncombined with ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),".")),(0,r.kt)("h2",{id:"overriding-styles"},"Overriding styles"),(0,r.kt)("p",null,"While we support variants per ",(0,r.kt)("a",{parentName:"p",href:"#variants"},"element"),", we also support overrides on the style sheet.\nWhen defined at this level, any override deemed active will be deeply merged into a single style\nsheet in the order of: base < color scheme < contrast level < theme."),(0,r.kt)("p",null,"This feature will override any selector, element, element at-rule (even their variants), or nested\nstyle object from the base style sheet! This makes it very powerful and very robust."),(0,r.kt)("h3",{id:"by-color-scheme"},"By color scheme"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addColorSchemeOverride()"),' method for overrides depending on the "light" or "dark" color\nscheme of the currently active theme. This is perfect for making slight changes to a theme between\nthe two modes.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    display: 'block',\n    color: 'gray',\n  },\n}))\n  .addColorSchemeOverride('light', () => ({\n    element: {\n      backgroundColor: 'white',\n      color: 'black',\n    },\n  }))\n  .addColorSchemeOverride('dark', () => ({\n    element: {\n      backgroundColor: 'black',\n      color: 'white',\n    },\n  }));\n")),(0,r.kt)("p",null,"This is equivalent to the native ",(0,r.kt)("inlineCode",{parentName:"p"},"prefers-color-scheme")," media query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<link href="themes/default.css" rel="stylesheet" />\n<link href="themes/day.css" rel="stylesheet" media="screen and (prefers-color-scheme: light)" />\n<link href="themes/night.css" rel="stylesheet" media="screen and (prefers-color-scheme: dark)" />\n')),(0,r.kt)("h3",{id:"by-contrast-level"},"By contrast level"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addContrastOverride()"),' method for overrides depending on the "low" or "high" contrast level\nof the currently active theme. This is perfect for providing accessible themes.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    display: 'block',\n    color: 'orange',\n  },\n}))\n  .addContrastOverride('low', () => ({\n    element: {\n      color: 'red',\n    },\n  }))\n  .addContrastOverride('high', () => ({\n    element: {\n      color: 'yellow',\n    },\n  }));\n")),(0,r.kt)("p",null,"This is equivalent to the native ",(0,r.kt)("inlineCode",{parentName:"p"},"prefers-contrast")," media query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<link href="themes/default.css" rel="stylesheet" />\n<link href="themes/default-low.css" rel="stylesheet" media="screen and (prefers-contrast: low)" />\n<link href="themes/default-high.css" rel="stylesheet" media="screen and (prefers-contrast: high)" />\n')),(0,r.kt)("h3",{id:"by-theme"},"By theme"),(0,r.kt)("p",null,"And finally, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addThemeOverride()")," method for overrides depending on the currently active\ntheme itself. This provides granular styles on a theme-by-theme basis, perfect for style sheets that\nare provided by third-parties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles(() => ({\n  element: {\n    display: 'block',\n    color: 'gray',\n  },\n}))\n  .addThemeOverride('night', () => ({\n    element: {\n      color: 'blue',\n    },\n  }))\n  .addThemeOverride('twilight', () => ({\n    element: {\n      color: 'purple',\n    },\n  }));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Theme names must match the names passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"registerTheme()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"registerDefaultTheme()"),".")),(0,r.kt)("h2",{id:"rendering-css"},"Rendering CSS"),(0,r.kt)("p",null,"Rendering a style sheet into CSS and injecting into the document is typically handled by an\nintegration and abstracted away from the consumer (see ",(0,r.kt)("inlineCode",{parentName:"p"},"useStyles()")," in the React package). However,\nif you would like to render styles manually, you may do so with the ",(0,r.kt)("inlineCode",{parentName:"p"},"renderComponentStyles()"),"\nmethod."),(0,r.kt)("p",null,"This method requires the style sheet instance as the 1st argument, and returns an object of class\nnames mapped to their selector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { renderComponentStyles } from '@aesthetic/<integration>';\nimport styleSheet from './some/styleSheet';\n\nconst result = renderComponentStyles(styleSheet);\n")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("p",null,"The structure of style objects is based on types provided by the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/sss"},"@aesthetic/sss")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/style"},"@aesthetic/style"),"\npackages."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/sss/local"},"Local style sheets")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/sss/global"},"Global style sheets")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/style/concepts#styles"},"Styles")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/style/concepts#rules"},"Selectors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/style/concepts#media-queries"},"Media queries")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/style/concepts#feature-queries"},"Feature queries")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/style/concepts#font-faces"},"Font faces")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/packages/style/concepts#keyframes"},"Keyframes"))))}p.isMDXComponent=!0}}]);