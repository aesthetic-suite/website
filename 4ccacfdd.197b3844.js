(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=b(n),h=a,u=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return n?r.a.createElement(u,s(s({ref:t},c),{},{components:n})):r.a.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(111)),l={title:"Global styles"},s={unversionedId:"packages/sss/global",id:"packages/sss/global",isDocsHomePage:!1,title:"Global styles",description:"A global style sheet serves 2 purposes. The 1st is that it houses all at-rules that should be",source:"@site/docs/packages/sss/global.md",slug:"/packages/sss/global",permalink:"/docs/packages/sss/global",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/packages/sss/global.md",version:"current",sidebar:"docs",previous:{title:"Local styles",permalink:"/docs/packages/sss/local"},next:{title:"API",permalink:"/docs/packages/sss/api"}},i=[{value:"Structure",id:"structure",children:[{value:"<code>@font-face</code>",id:"font-face",children:[]},{value:"<code>@import</code>",id:"import",children:[]},{value:"<code>@keyframes</code>",id:"keyframes",children:[]},{value:"<code>@page</code>",id:"page",children:[]},{value:"<code>@root</code>",id:"root",children:[]},{value:"<code>@viewport</code>",id:"viewport",children:[]}]},{value:"Parsing",id:"parsing",children:[]}],c={rightToc:i};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A global style sheet serves 2 purposes. The 1st is that it houses all at-rules that should be\nprocessed at the document level, and not the element level. The 2nd is for defining global-like\nstyles, in which ",Object(o.b)("inlineCode",{parentName:"p"},"body")," style declarations can be defined, and should typically be scoped within a\nclass name to avoid collisions."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"GlobalStyleSheet")," interface can be used for type information."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { GlobalStyleSheet } from '@aesthetic/sss';\n")),Object(o.b)("h2",{id:"structure"},"Structure"),Object(o.b)("p",null,"For global style sheets, the following at-rules are the only values that may be defined in the root\nof the sheet."),Object(o.b)("h3",{id:"font-face"},Object(o.b)("inlineCode",{parentName:"h3"},"@font-face")),Object(o.b)("p",null,"Defines a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"}),"font face")," that can be\nreferenced with the ",Object(o.b)("inlineCode",{parentName:"p"},"fontFamily")," property. The at-rule requires an object, with the font family name\nas the key, and the font face(s) as the value. Each font face requires a ",Object(o.b)("inlineCode",{parentName:"p"},"srcPaths")," array."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@font-face': {\n    'Open Sans': {\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n  },\n};\n")),Object(o.b)("p",null,"To support multiple font variations, like bold and italics, pass an array of font faces."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@font-face': {\n    'Open Sans': [\n      {\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n      },\n      {\n        fontStyle: 'italic',\n        fontWeight: 'normal',\n        srcPaths: ['fonts/OpenSans-Italic.woff2', 'fonts/OpenSans-Italic.ttf'],\n      },\n      {\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        srcPaths: ['fonts/OpenSans-Bold.woff2', 'fonts/OpenSans-Bold.ttf'],\n      },\n    ],\n  },\n};\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"fontFamily")," property can be omitted within the font face as it'll be inherited from the\nat-rule key.")),Object(o.b)("p",null,"Emits a ",Object(o.b)("inlineCode",{parentName:"p"},"font-face")," event for each declaration."),Object(o.b)("h3",{id:"import"},Object(o.b)("inlineCode",{parentName:"h3"},"@import")),Object(o.b)("p",null,"Defines one or many ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@import"}),"CSS files to import"),",\nrelative to the document root. An import can either be a proper CSS formatted string (including\nquotes), or an object of ",Object(o.b)("inlineCode",{parentName:"p"},"path")," (required), ",Object(o.b)("inlineCode",{parentName:"p"},"query"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"url"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@import': [\n    // String\n    'url(\"css/reset.css\") screen',\n\n    // Object\n    {\n      path: 'css/reset.css',\n      media: 'screen',\n      url: true,\n    },\n  ],\n};\n")),Object(o.b)("p",null,"If the ",Object(o.b)("inlineCode",{parentName:"p"},"url")," property is not defined, or is ",Object(o.b)("inlineCode",{parentName:"p"},"false"),", the import path will not be wrapped with\n",Object(o.b)("inlineCode",{parentName:"p"},"url()"),"."),Object(o.b)("p",null,"Emits an ",Object(o.b)("inlineCode",{parentName:"p"},"import")," event for each import."),Object(o.b)("h3",{id:"keyframes"},Object(o.b)("inlineCode",{parentName:"h3"},"@keyframes")),Object(o.b)("p",null,"Defines a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes"}),"keyframes animation")," that\ncan be referenced with the ",Object(o.b)("inlineCode",{parentName:"p"},"animationName")," property. The at-rule requires an object, with the\nanimation name as the key, and the keyframes as the value. Supports both range (from/to) and\npercentage based sequences."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@keyframes': {\n    // Range\n    fade: {\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    },\n\n    // Percentage\n    slide: {\n      '0%': { left: '0%' },\n      '50%': { left: '75%' },\n      '100%': { left: '100%' },\n    },\n  },\n};\n")),Object(o.b)("p",null,"Emits a ",Object(o.b)("inlineCode",{parentName:"p"},"keyframes")," event for each declaration."),Object(o.b)("h3",{id:"page"},Object(o.b)("inlineCode",{parentName:"h3"},"@page")),Object(o.b)("p",null,"Defines a ruleset to be applied when the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@page"}),"document is printed"),". Supports standard and\npseudo-class (",Object(o.b)("inlineCode",{parentName:"p"},":blank"),", ",Object(o.b)("inlineCode",{parentName:"p"},":first"),", ",Object(o.b)("inlineCode",{parentName:"p"},":left"),", ",Object(o.b)("inlineCode",{parentName:"p"},":right"),") declaration blocks."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@page': {\n    margin: '1cm',\n\n    ':first': {\n      margin: '2cm',\n    },\n  },\n};\n")),Object(o.b)("p",null,"Page type selectors are also supported, and are defined with an object, where the key is the\nselector, and the value are property declarations. They can be defined in both standard and\npseudo-class blocks."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@page': {\n    size: '8.5in 11in',\n\n    '@top-right': {\n      content: '\"Page\" counter(page)',\n    },\n\n    ':blank': {\n      '@top-center': {\n        content: '\"This page is intentionally left blank.\"',\n      },\n    },\n  },\n};\n")),Object(o.b)("p",null,"Emits a ",Object(o.b)("inlineCode",{parentName:"p"},"page")," event for each declaration, including selectors."),Object(o.b)("h3",{id:"root"},Object(o.b)("inlineCode",{parentName:"h3"},"@root")),Object(o.b)("p",null,"As stated at the start of the chapter, the global style sheet can generate global-like CSS styles by\nusing the ",Object(o.b)("inlineCode",{parentName:"p"},"@root")," at-rule. This at-rule is a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/packages/sss/local"}),"local style sheet")," that should be\nprocessed and generated to a class name that is set on the ",Object(o.b)("inlineCode",{parentName:"p"},"body")," element. It's built this way to\navoid global collisions between multiple themes or differing global style sheets."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@root': {\n    fontFamily: 'Roboto',\n    fontSize: 16,\n    lineHeight: 1.5,\n    backgroundColor: 'white',\n    color: 'black',\n    height: '100%',\n    margin: 0,\n    padding: 0,\n\n    '@media': {\n      '(max-width: 400px)': {\n        fontSize: 14,\n        lineHeight: 1.25,\n      },\n    },\n\n    '@selectors': {\n      a: {\n        color: 'blue',\n      },\n\n      p: {\n        margin: 8,\n      },\n    },\n  },\n};\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"html"),", ",Object(o.b)("inlineCode",{parentName:"p"},":root"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"*")," global styles cannot be defined with a global style sheet. Those\ncategory of globals should be handled outside of this system.")),Object(o.b)("p",null,"Emits a single ",Object(o.b)("inlineCode",{parentName:"p"},"root")," event."),Object(o.b)("h3",{id:"viewport"},Object(o.b)("inlineCode",{parentName:"h3"},"@viewport")),Object(o.b)("p",null,"Defines a ruleset that dictates how the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@viewport"}),"viewport")," operates. Only accepts width,\nheight, zoom, and orientation related properties."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const globalSheet: GlobalStyleSheet = {\n  '@viewport': {\n    width: 'device-width',\n    orientation: 'landscape',\n  },\n};\n")),Object(o.b)("p",null,"Emits a ",Object(o.b)("inlineCode",{parentName:"p"},"viewport")," event."),Object(o.b)("h2",{id:"parsing"},"Parsing"),Object(o.b)("p",null,"To parse a style sheet, import and instantiate the ",Object(o.b)("inlineCode",{parentName:"p"},"GlobalParser"),". To streamline consumption, the\nparser utilizes an event emitter, where each at-rule must be listened to and handled. Once listeners\nare registered, execute the ",Object(o.b)("inlineCode",{parentName:"p"},"parse()")," method with the style sheet."),Object(o.b)("p",null,'Because of this architecture, you must "build" or "handle" the final result yourself. In the example\nbelow, when an event is emitted, we will insert a formatted rule into our style sheet.'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { GlobalParser } from '@aesthetic/sss';\n\nconst sheet = new CSSStyleSheet();\n\nconst parser = new GlobalParser({\n  onFontFace(fontFace, family) {\n    sheet.insertRule(`@font-face { ${cssify(fontFace)} }`, sheet.cssRules.length);\n\n    return family;\n  },\n  onImport(path) {\n    sheet.insertRule(`@import ${path};`, sheet.cssRules.length);\n  },\n  onKeyframes(keyframes, name) {\n    sheet.insertRule(`@keyframes ${name} { ${cssify(keyframes)} }`, sheet.cssRules.length);\n\n    return name;\n  },\n  onPage(page) {\n    sheet.insertRule(`${page.selector} { ${cssify(page)} }`, sheet.cssRules.length);\n  },\n  onViewport(viewport) {\n    sheet.insertRule(`@viewport { ${cssify(viewport)} }`, sheet.cssRules.length);\n  },\n});\n\nparser.parse({\n  '@viewport': {\n    width: 'device-width',\n    orientation: 'landscape',\n  },\n});\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The full list of events and their types can be found in the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/aesthetic-suite/framework/blob/master/packages/sss/src/Parser.ts"}),"source ",Object(o.b)("inlineCode",{parentName:"a"},"Parser")," class"),".")))}b.isMDXComponent=!0}}]);