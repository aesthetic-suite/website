(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[8704],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1818:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i={title:"Styled components"},s={unversionedId:"react-native/styled",id:"react-native/styled",isDocsHomePage:!1,title:"Styled components",description:"An alternative to styling components manually is to use the createStyled() API,",source:"@site/docs/react-native/styled.md",sourceDirName:"react-native",slug:"/react-native/styled",permalink:"/docs/react-native/styled",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/react-native/styled.md",version:"current",frontMatter:{title:"Styled components"},sidebar:"reactNative",previous:{title:"Styling components",permalink:"/docs/react-native/styles"},next:{title:"Directionality",permalink:"/docs/react-native/direction"}},l=[{value:"Variant styles",id:"variant-styles",children:[]},{value:"Composing components",id:"composing-components",children:[]}],c={toc:l};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An alternative to ",(0,o.kt)("a",{parentName:"p",href:"/docs/react-native/styles"},"styling components")," manually is to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"createStyled()")," API,\nwhich creates a reusable component at the lowest level. This approach was made popular by the\n",(0,o.kt)("a",{parentName:"p",href:"https://styled-components.com"},"styled-components")," library."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"createStyled()")," function requires a standard ",(0,o.kt)("inlineCode",{parentName:"p"},"View"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),", etc, and a partial\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dev/css-in-js/style-sheets/components"},"style sheet")," (either an object or function), in which\na single element is styled, instead of multiple elements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { View } from 'react-native';\nimport { createStyled } from '@aesthetic/react-native';\n\nconst Box = createStyled(View, (theme) => ({\n  flex: 1,\n  justifyContent: 'space-between',\n  padding: theme.tokens.spacing.df,\n}));\n\nexport default Box;\n")),(0,o.kt)("p",null,"Because this API is based on existing native components, all props for that specific component are\nautomatically supported and are typed correctly if using TypeScript."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<Box renderToHardwareTextureAndroid accessibilityLabel="Descriptive label">\n  Content\n</Box>\n')),(0,o.kt)("h2",{id:"variant-styles"},"Variant styles"),(0,o.kt)("p",null,"Styled components can support any number of customizable variations out of the box."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const Box = createStyled(View, (theme) => ({\n  flex: 1,\n  justifyContent: 'space-between',\n  padding: theme.tokens.spacing.df,\n\n  '@variants': {\n    'size:sm': { fontSize: theme.tokens.text.sm.size },\n    'size:df': { fontSize: theme.tokens.text.df.size },\n    'size:lg': { fontSize: theme.tokens.text.lg.size },\n\n    'palette:brand': { backgroundColor: theme.tokens.palette.brand.bg.base },\n    'palette:positive': { backgroundColor: theme.tokens.palette.positive.bg.base },\n    'palette:warning': { backgroundColor: theme.tokens.palette.warning.bg.base },\n  },\n});\n\n// Set default props to define default variants\nBox.defaultProps = {\n  palette: 'brand',\n};\n")),(0,o.kt)("p",null,"You can then enable a variant by passing a prop with the name of a variant, and a value of one of\nits types."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<Box palette="brand" size="lg">\n  Large branded box\n</Box>\n')),(0,o.kt)("p",null,"If using TypeScript, you'll need to type the variant props manually using the 2nd generic."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface BoxVariants {\n  size?: 'sm' | 'df' | 'lg';\n  palette?: 'brand' | 'positive' | 'warning';\n}\n\nconst Box = createStyled<typeof View, BoxVariants>(View, {\n  // ...\n});\n")),(0,o.kt)("h2",{id:"composing-components"},"Composing components"),(0,o.kt)("p",null,"Styled components can also extend and compose around other styled components. When using this\napproach, all styles and their variants are inherited."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const Button = createStyled(View, (theme) => ({\n  flex: 1,\n  alignItems: 'center',\n  padding: theme.tokens.spacing.df,\n}));\n\nconst BlockButton = createStyled(Button, {\n  width: '100%',\n});\n\nconst PillBlockButton = createStyled(BlockButton, {\n  borderRadius: 100,\n});\n")))}p.isMDXComponent=!0}}]);