(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[4804],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?s.createElement(h,a(a({ref:t},p),{},{components:n})):s.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},479:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return o},toc:function(){return l},default:function(){return p}});var s=n(2122),r=n(9756),i=(n(7294),n(3905)),a={title:"Style sheets",sidebar_label:"Overview"},o={unversionedId:"dev/css-in-js/style-sheets",id:"dev/css-in-js/style-sheets",isDocsHomePage:!1,title:"Style sheets",description:"Styles within Aesthetic are managed through style sheets and are divided into the following 2",source:"@site/docs/dev/css-in-js/style-sheets.md",sourceDirName:"dev/css-in-js",slug:"/dev/css-in-js/style-sheets",permalink:"/docs/dev/css-in-js/style-sheets",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/dev/css-in-js/style-sheets.md",version:"current",sidebar_label:"Overview",frontMatter:{title:"Style sheets",sidebar_label:"Overview"},sidebar:"docs",previous:{title:"Themes",permalink:"/docs/dev/css-in-js/themes"},next:{title:"Theme style sheets",permalink:"/docs/dev/css-in-js/style-sheets/themes"}},l=[{value:"Utilities",id:"utilities",children:[{value:"Variables",id:"variables",children:[]},{value:"Mixins",id:"mixins",children:[]},{value:"Units",id:"units",children:[]}]}],c={toc:l};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Styles within Aesthetic are managed through style sheets and are divided into the following 2\ncategories."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/dev/css-in-js/style-sheets/components"},"Element and component style sheets"),". Isolates styles to components\nand their elements."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/dev/css-in-js/style-sheets/themes"},"Theme style sheets"),". Provides styles and at-rules for the document.")),(0,i.kt)("p",null,"Style sheets are created with either the ",(0,i.kt)("inlineCode",{parentName:"p"},"createElementStyles()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"createComponentStyles()"),", or\n",(0,i.kt)("inlineCode",{parentName:"p"},"createThemeStyles()")," methods respectively. All methods require a function that returns a ",(0,i.kt)("em",{parentName:"p"},"style\nobject")," (also known as a factory function)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createComponentStyles } from '@aesthetic/<integration>';\n\nconst styleSheet = createComponentStyles(() => ({\n  button: {\n    appearance: 'none',\n    backgroundColor: 'transparent',\n    border: 0,\n    cursor: 'pointer',\n    display: 'inline-flex',\n    fontSize: 'inherit',\n    margin: 0,\n    padding: '6px 8px',\n    textAlign: 'center',\n    textDecoration: 'none',\n    userSelect: 'auto',\n    verticalAlign: 'middle',\n  },\n}));\n")),(0,i.kt)("h2",{id:"utilities"},"Utilities"),(0,i.kt)("p",null,"Manually writing style objects over and over can be tiresome, especially when you need to reuse\nconsistent values (font sizes, spacing, etc) across many components. Aesthetic solves this through\nits robust ",(0,i.kt)("a",{parentName:"p",href:"/docs/design-system"},"design system"),", which is a ",(0,i.kt)("em",{parentName:"p"},"hard requirement")," as it powers all\nreusability. To make use of this, the design system must be compiled into JavaScript/TypeScript\nbased ",(0,i.kt)("a",{parentName:"p",href:"/docs/design-tokens"},"design tokens"),"."),(0,i.kt)("p",null,"A few design token based utility methods are passed to the 1st argument within the style sheet\nfactory function. We like to name this object ",(0,i.kt)("inlineCode",{parentName:"p"},"css"),", as demonstrated within the examples below."),(0,i.kt)("h3",{id:"variables"},"Variables"),(0,i.kt)("p",null,"Variables are consistent and reusable values that are derived from settings within a design system's\nlanguage and themes. A variable can be accessed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"var(name: string)")," method, which requires\na fully qualified name based on the token object structure."),(0,i.kt)("p",null,"Let's now update our example to ",(0,i.kt)("em",{parentName:"p"},"not")," use hard-coded padding values, while also using expanded\nproperties."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  button: {\n    appearance: 'none',\n    backgroundColor: 'transparent',\n    border: 0,\n    cursor: 'pointer',\n    display: 'inline-flex',\n    fontSize: 'inherit',\n    margin: 0,\n    padding: {\n      topBottom: css.var('spacing-df'), // Default padding\n      leftRight: css.var('spacing-md'), // Medium padding\n    },\n    textAlign: 'center',\n    textDecoration: 'none',\n    userSelect: 'auto',\n    verticalAlign: 'middle',\n  },\n}));\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Variables utilize CSS variables under the hood for dynamic styling and reduced output size.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/aesthetic-suite/framework/blob/master/packages/system/src/types.ts#L442"},"List of valid variable names"))),(0,i.kt)("h3",{id:"mixins"},"Mixins"),(0,i.kt)("p",null,"Mixins also provide reusability, but instead of providing a single value, they provide a collection\nof pre-styled CSS properties that can be merged into your own style objects via the\n",(0,i.kt)("inlineCode",{parentName:"p"},"mixin(name: string, styles?: object)")," method."),(0,i.kt)("p",null,"Continuing our example even further, let's easily reset our button. You'll notice that we removed\nmost of the properties. That's because they are provided by the mixin and we no longer have to\ndefine them manually!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  button: css.mixin('reset-button', {\n    padding: {\n      topBottom: css.var('spacing-df'),\n      leftRight: css.var('spacing-md'),\n    },\n    textAlign: 'center',\n  }),\n}));\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/aesthetic-suite/framework/blob/master/packages/system/src/types.ts#L461"},"List of valid mixin names")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/aesthetic-suite/framework/blob/master/packages/system/src/mixins.ts"},"Built-in mixins and their CSS properties"))),(0,i.kt)("h3",{id:"units"},"Units"),(0,i.kt)("p",null,"If you ever need a ",(0,i.kt)("inlineCode",{parentName:"p"},"rem")," unit based on the design system's spacing type, use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"unit(...sizes: number[])")," method, which requires any number of multipliers."),(0,i.kt)("p",null,"Let's say our root text size is 16px and our spacing unit is 8px, we would generate the following\n",(0,i.kt)("inlineCode",{parentName:"p"},"rem")," values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const styleSheet = createComponentStyles((css) => ({\n  button: {\n    // All edges\n    padding: css.unit(1), // .5rem\n    // Top/bottom, left/right\n    padding: css.unit(1, 2), // .5rem 1rem\n    // Top, right, bottom, left\n    padding: css.unit(1, 2, 3, 4), // .5rem 1rem 1.5 2rem\n    // ...\n  },\n}));\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Using explicit units is frowned upon as it deviates from the design system's strict spacing\nguidelines. It also increases the CSS output size as it generates additional class names. Use\nsparingly.")))}p.isMDXComponent=!0}}]);