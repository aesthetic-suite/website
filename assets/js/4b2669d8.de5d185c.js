(self.webpackChunkaesthetic_website=self.webpackChunkaesthetic_website||[]).push([[1797],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),f=r,u=m["".concat(l,".").concat(f)]||m[f]||d[f]||o;return t?a.createElement(u,i(i({ref:n},c),{},{components:t})):a.createElement(u,i({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2411:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var a=t(2122),r=t(9756),o=(t(7294),t(3905)),i={title:"Specification"},s={unversionedId:"packages/sss/spec",id:"packages/sss/spec",isDocsHomePage:!1,title:"Specification",description:"Font faces",source:"@site/docs/packages/sss/spec.md",sourceDirName:"packages/sss",slug:"/packages/sss/spec",permalink:"/docs/packages/sss/spec",editUrl:"https://github.com/aesthetic-suite/website/edit/master/docs/packages/sss/spec.md",version:"current",frontMatter:{title:"Specification"},sidebar:"docs",previous:{title:"Structured style sheets",permalink:"/docs/packages/sss"},next:{title:"Local styles",permalink:"/docs/packages/sss/local"}},l=[{value:"Font faces",id:"font-faces",children:[]},{value:"Keyframes",id:"keyframes",children:[]},{value:"Properties",id:"properties",children:[{value:"Animations",id:"animations",children:[]},{value:"Fonts",id:"fonts",children:[]},{value:"Expanded properties",id:"expanded-properties",children:[]}]},{value:"Selectors",id:"selectors",children:[{value:"Attributes",id:"attributes",children:[]},{value:"Pseudos",id:"pseudos",children:[]}]}],p={toc:l};function c(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"font-faces"},"Font faces"),(0,o.kt)("p",null,"A font face is a unique declaration used by ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/sss/global#font-face"},(0,o.kt)("inlineCode",{parentName:"a"},"@font-face")," at-rules")," and\n",(0,o.kt)("a",{parentName:"p",href:"#fonts"},"local fonts"),". Unlike normal CSS where you define a ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," property, in Aesthetic you define\n",(0,o.kt)("inlineCode",{parentName:"p"},"srcPaths"),", which is an array of paths to the source files. This allows consumers to operate on\npaths individually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { FontFace } from '@aesthetic/sss';\n\nconst fontFace: FontFace = {\n  fontStyle: 'normal',\n  fontWeight: 'normal',\n  srcPaths: ['fonts/OpenSans.ttf'],\n};\n")),(0,o.kt)("p",null,"Furthermore, local source aliases (",(0,o.kt)("inlineCode",{parentName:"p"},"local()"),") can be defined by passing an array of names to a\n",(0,o.kt)("inlineCode",{parentName:"p"},"local")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const fontFace: FontFace = {\n  fontStyle: 'normal',\n  fontWeight: 'normal',\n  local: ['OpenSans', 'Open-Sans'],\n  srcPaths: ['fonts/OpenSans.ttf'],\n};\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"local")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"srcPaths")," properties are unique to Aesthetic and aren't an official CSS property.")),(0,o.kt)("h2",{id:"keyframes"},"Keyframes"),(0,o.kt)("p",null,"Keyframes are another unique declaration that are used by\n",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/sss/global#keyframes"},(0,o.kt)("inlineCode",{parentName:"a"},"@keyframes")," at-rules")," and ",(0,o.kt)("a",{parentName:"p",href:"#animations"},"local animations"),". They support\nboth from/to and percentage based formats."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Keyframes } from '@aesthetic/sss';\n\nconst fromTo: Keyframes = {\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n};\n\nconst percentage: Keyframes = {\n  '0%': { left: '0%' },\n  '50%': { left: '75%' },\n  '100%': { left: '100%' },\n};\n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("p",null,"The foundation of all styles are properties, where each key-value pair maps to a\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#CSS_declarations"},"CSS declaration"),", and\nabides the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Property names are camel cased versions of their CSS equivalent property."),(0,o.kt)("li",{parentName:"ul"},"Vendor prefixed properties are ",(0,o.kt)("em",{parentName:"li"},"not")," supported. Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"vendorPrefixer")," setting to enable this\nautomatically."),(0,o.kt)("li",{parentName:"ul"},"Unit values that default to the ",(0,o.kt)("inlineCode",{parentName:"li"},"defaultUnit")," (typically ",(0,o.kt)("inlineCode",{parentName:"li"},"px"),") setting can be written as literal\nnumbers."),(0,o.kt)("li",{parentName:"ul"},"Values that require quotes in the CSS output must manually handle the quotes within the string.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { DeclarationBlock } from '@aesthetic/sss';\n\nconst styles: DeclarationBlock = {\n  margin: 0,\n  padding: 5,\n  display: 'inline-block',\n  lineHeight: 'normal',\n  textAlign: 'center',\n  cursor: 'pointer',\n  backgroundColor: '#ccc',\n  color: '#000',\n  content: '\"Title\"',\n};\n")),(0,o.kt)("h3",{id:"animations"},"Animations"),(0,o.kt)("p",null,"Inline keyframes can be defined by passing an object or an array of objects to ",(0,o.kt)("inlineCode",{parentName:"p"},"animationName"),",\nwhere each object abides the ",(0,o.kt)("a",{parentName:"p",href:"#keyframes"},"keyframes")," specification."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { DeclarationBlock } from '@aesthetic/sss';\n\n// Reference global keyframes by name\nconst styles: DeclarationBlock = {\n  animationName: 'fade, slide',\n};\n\n// Single animation\nconst styles: DeclarationBlock = {\n  animationName: {\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  },\n};\n\n// Multiple animations\nconst styles: DeclarationBlock = {\n  animationName: [\n    'slide', // Reference a global\n    {\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    },\n    {\n      '0%': { bottom: 0 },\n      '100%': { bottom: '100%' },\n    },\n  ],\n};\n")),(0,o.kt)("h3",{id:"fonts"},"Fonts"),(0,o.kt)("p",null,"Inline font faces can be defined by passing an object or an array of objects to ",(0,o.kt)("inlineCode",{parentName:"p"},"fontFamily"),", where\neach object abides the ",(0,o.kt)("a",{parentName:"p",href:"#font-face"},"font face")," specification. This approach requires an explicit\n",(0,o.kt)("inlineCode",{parentName:"p"},"fontFamily")," for each font face."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { DeclarationBlock } from '@aesthetic/sss';\n\n// Reference global font by name\nconst styles: DeclarationBlock = {\n  fontFamily: '\"Open Sans\", Roboto',\n};\n\n// Single font\nconst styles: DeclarationBlock = {\n  fontFamily: {\n    fontFamily: 'Open Sans',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n  },\n};\n\n// Multiple fonts\nconst styles: DeclarationBlock = {\n  fontFamily: [\n    'Roboto', // Reference a global font\n    {\n      fontFamily: 'Open Sans',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      srcPaths: ['fonts/OpenSans.woff2', 'fonts/OpenSans.ttf'],\n    },\n    {\n      fontFamily: 'Open Sans',\n      fontStyle: 'normal',\n      fontWeight: 800,\n      srcPaths: ['fonts/OpenSans-Bold.woff2', 'fonts/OpenSans-Bold.ttf'],\n    },\n  ],\n};\n")),(0,o.kt)("h3",{id:"expanded-properties"},"Expanded properties"),(0,o.kt)("p",null,"CSS has a concept known as\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties"},"shorthand properties"),", where\nmultiple properties and their values can be declared with a single property. For example,\n",(0,o.kt)("inlineCode",{parentName:"p"},"border-width"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"border-style"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"border-color")," can be combined in ",(0,o.kt)("inlineCode",{parentName:"p"},"border"),"."),(0,o.kt)("p",null,"However, in CSS-in-JS, shorthand properties cause issues when defined alongside their longhand\nproperties, so Aesthetic offers an expanded form for a handful of shorthand properties (cue irony)\nthrough the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@aesthetic/addon-properties"},"@aesthetic/addon-properties"),"\npackage. The current shorthand properties that support an expanded form are: ",(0,o.kt)("inlineCode",{parentName:"p"},"animation"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"background"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"border"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"borderBottom"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"borderLeft"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"borderRight"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"borderTop"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"columnRule"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"flex"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"font"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"listStyle"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"margin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"offset"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"outline"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"padding"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"textDecoration"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"transition"),";"),(0,o.kt)("p",null,"To utilize the expanded form, define an object where each property within maps to an equivalent\nlonghand property. Using the border example above, the object would look like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { DeclarationBlock } from '@aesthetic/sss';\n\nconst styles: DeclarationBlock = {\n  // Shorthand\n  border: '1px dashed red',\n\n  // Longhand\n  borderWidth: 1,\n  borderStyle: 'dashed',\n  borderColor: 'red',\n\n  // Expanded\n  border: {\n    width: 1,\n    style: 'dashed',\n    color: 'red',\n  },\n};\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"While parsing, expanded properties will be converted to longhand, to mitigate issues caused by\nshorthand when dealing with atomic CSS and CSS-in-JS.")),(0,o.kt)("h2",{id:"selectors"},"Selectors"),(0,o.kt)("p",null,"For proper type-safety and isolation, only static attribute and pseudo selectors are supported, as\ndynamic selectors with an infinite number of combinations or permutations cannot be typed. The list\nof supported selectors can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/frenic/csstype"},"csstype")," library,\nprimarily ",(0,o.kt)("inlineCode",{parentName:"p"},"SimplePseudos")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"HtmlAttributes"),"."),(0,o.kt)("h3",{id:"attributes"},"Attributes"),(0,o.kt)("p",null,"Attribute selectors can be defined by wrapping the attribute name in square brackets."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { DeclarationBlock } from '@aesthetic/sss';\n\nconst styles: DeclarationBlock = {\n  // ...\n  '[disabled]': {\n    opacity: 0.3,\n  },\n};\n")),(0,o.kt)("h3",{id:"pseudos"},"Pseudos"),(0,o.kt)("p",null,"Pseudo classes and pseudo elements can be defined by prefixing the pseudo name with a ",(0,o.kt)("inlineCode",{parentName:"p"},":")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"::"),"\nrespectively."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { DeclarationBlock } from '@aesthetic/sss';\n\nconst styles: DeclarationBlock = {\n  // ...\n  ':hover': {\n    backgroundColor: '#eee',\n  },\n  '::before': {\n    content: '\"\u2605\"',\n    display: 'inline-block',\n    marginRight: 5,\n  },\n};\n")))}c.isMDXComponent=!0}}]);